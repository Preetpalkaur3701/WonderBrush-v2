// blending.h

#ifndef BLENDING_H
#define BLENDING_H

#include <SupportDefs.h>

#if 0
// bit error version:
//#define INT_MULT(a, b, t)		((t)=(a) * (b), ((((t) >> 8) + (t)) >> 8))
// correct version
#define INT_MULT(a, b, t)			((t) = (a) * (b) + 0x80, ((((t) >> 8) + (t) ) >> 8))

#define INT_LERP(p, q, a, t)		((p) + INT_MULT(a, ((q) - (p)), t))

#define INT_PRELERP(p, q, a, t)		((p) + (q) - INT_MULT(a, p, t))

// color components are not yet premultiplied with alpha
// put_color
inline void
put_color(uint8* dest, uint8 alpha, uint16 c1, uint16 c2, uint16 c3)
{
	// dest is assumed to contain alpha-premultiplied color components
	if (alpha > 0) {
		// premultiply color components with alpha
		c1 = (c1 * alpha) / 255;
		c2 = (c2 * alpha) / 255;
		c3 = (c3 * alpha) / 255;
		// do the compositing
		if (dest[3] == 0 || alpha == 255) {
			dest[0] = c1;
			dest[1] = c2;
			dest[2] = c3;
			dest[3] = alpha;
		} else {
			// taking dest alpha into account
			uint32 temp;
			dest[0] = INT_PRELERP(dest[0], c1, alpha, temp);
			dest[1] = INT_PRELERP(dest[1], c2, alpha, temp);
			dest[2] = INT_PRELERP(dest[2], c3, alpha, temp);
			dest[3] = INT_PRELERP(dest[3], alpha, alpha, temp);
		}
	}
}

// color components are not yet premultiplied with alpha
// computes the blended pixel from dest and supplied parameters and puts the result into dest pixel
// put_color
inline void
put_color_copy(uint8* source, uint8* dest, uint8 alpha, uint16 c1, uint16 c2, uint16 c3)
{
	// dest is assumed to contain alpha-premultiplied color components
	// source will contain alpha-premultiplied color components 
	if (alpha > 0) {
		// premultiply color components with alpha
		c1 = (c1 * alpha) / 255;
		c2 = (c2 * alpha) / 255;
		c3 = (c3 * alpha) / 255;
		// do the compositing
		if (source[3] == 0 || alpha == 255) {
			dest[0] = c1;
			dest[1] = c2;
			dest[2] = c3;
			dest[3] = alpha;
		} else {
			// taking dest alpha into account
			uint32 temp;
			dest[0] = INT_PRELERP(source[0], c1, alpha, temp);
			dest[1] = INT_PRELERP(source[1], c2, alpha, temp);
			dest[2] = INT_PRELERP(source[2], c3, alpha, temp);
			dest[3] = INT_PRELERP(source[3], alpha, alpha, temp);
		}
	} else {
		*((uint32*)dest) = *((uint32*)source);
	}
}

// blending two 800x600 bitmaps with "50" on each component (and alpha): 16501  usecs

// color components are assumed to be alpha-premultiplied
// blend_colors
inline void
blend_colors(uint8* dest, uint8* source)
{
	// dest is assumed to contain alpha-premultiplied color components
	if (source[3] > 0) {
		// do the compositing
		if (dest[3] == 0 || source[3] == 255) {
			dest[0] = source[0];
			dest[1] = source[1];
			dest[2] = source[2];
			dest[3] = source[3];
		} else {
			// taking dest alpha into account
			uint32 temp;
			dest[0] = INT_PRELERP(dest[0], source[0], source[3], temp);
			dest[1] = INT_PRELERP(dest[1], source[1], source[3], temp);
			dest[2] = INT_PRELERP(dest[2], source[2], source[3], temp);
			dest[3] = INT_PRELERP(dest[3], source[3], source[3], temp);
		}
	}
}



// color components are assumed to be alpha-premultiplied
// put_color_demultiply
inline void
put_color_demultiply(uint8* dest, uint8* source)
{
	// dest is assumed to contain alpha-premultiplied color components
	if (source[3] > 0) {
		// do the compositing
		if (dest[3] == 0 || source[3] == 255) {
			// no need to demultiply
			dest[0] = source[0];
			dest[1] = source[1];
			dest[2] = source[2];
			dest[3] = source[3];
		} else {
			// taking dest alpha into account
			uint32 temp;
/*			uint8 alpha = source[3];
			dest[0] = (INT_PRELERP(source[0], dest[0],alpha, temp) / alpha) / 255;
			dest[1] = (INT_PRELERP(source[1], dest[1], alpha, temp) / alpha) / 255;
			dest[2] = (INT_PRELERP(source[2], dest[2], alpha, temp) / alpha) / 255;
			dest[3] = INT_PRELERP(alpha, dest[3], alpha, temp);*/
			dest[0] = INT_PRELERP(dest[0], source[0], source[3], temp);
			dest[1] = INT_PRELERP(dest[1], source[1], source[3], temp);
			dest[2] = INT_PRELERP(dest[2], source[2], source[3], temp);
			dest[3] = INT_PRELERP(dest[3], source[3], source[3], temp);
		}
	}
}
#endif


// blending two 800x600 bitmaps with "50" on each component (and alpha): ~44000 usecs


// blend_colors_copy
inline void
blend_colors_copy(uint8* bottom, uint8 alpha, uint8* dest,
				  uint8 c1, uint8 c2, uint8 c3)
{
	if (alpha > 0) {
		if (bottom[3] == 0 || alpha == 255) {
			dest[0] = c1;
			dest[1] = c2;
			dest[2] = c3;
			dest[3] = alpha;
		} else {
/*				// convert to linear rgb
			double sc1 = pow((double)c1 / 255.0, 2.5);
			double sc2 = pow((double)c2 / 255.0, 2.5);
			double sc3 = pow((double)c3 / 255.0, 2.5);

			double dc1 = pow((double)bottom[0] / 255.0, 2.5);
			double dc2 = pow((double)bottom[1] / 255.0, 2.5);
			double dc3 = pow((double)bottom[2] / 255.0, 2.5);
			double sAlpha = (double)alpha / 255.0;
			double dAlpha = 1.0 - sAlpha;
			if (bottom[3] == 255) {
				dest[0] = (uint8)floor(pow(dc1 * dAlpha + sc1 * sAlpha, 0.45) * 255.0 + 0.5);
				dest[1] = (uint8)floor(pow(dc2 * dAlpha + sc2 * sAlpha, 0.45) * 255.0 + 0.5);
				dest[2] = (uint8)floor(pow(dc3 * dAlpha + sc3 * sAlpha, 0.45) * 255.0 + 0.5);
				dest[3] = 255;
			} else {
				double srcAlpha = alpha / 255.0;
				double dstAlpha = bottom[3] / 255.0;
				double rltAlpha = (1.0 - (1.0 - srcAlpha) * (1.0 - dstAlpha));
				double dAlpha = dstAlpha * (1.0 - srcAlpha);
				dest[0] = (uint8)floor(pow((dAlpha * dc1 + srcAlpha * sc1) / rltAlpha, 0.45) * 255 + 0.5);
				dest[1] = (uint8)floor(pow((dAlpha * dc2 + srcAlpha * sc2) / rltAlpha, 0.45) * 255 + 0.5);
				dest[2] = (uint8)floor(pow((dAlpha * dc3 + srcAlpha * sc3) / rltAlpha, 0.45) * 255 + 0.5);
				dest[3] = (uint8)(255.0 * rltAlpha);
			}*/
			if (bottom[3] == 255) {
				uint32 destAlpha = 255 - alpha;
				dest[0] = (uint8)((bottom[0] * destAlpha + c1 * alpha) / 255);
				dest[1] = (uint8)((bottom[1] * destAlpha + c2 * alpha) / 255);
				dest[2] = (uint8)((bottom[2] * destAlpha + c3 * alpha) / 255);
				dest[3] = 255;
			} else {
//				float srcAlpha = alpha / 255.0;
//				float dstAlpha = bottom[3] / 255.0;
//				float rltAlpha = (1.0 - (1.0 - srcAlpha) * (1.0 - dstAlpha));
//				dest[0] = (uint8)(((dstAlpha * (1.0 - srcAlpha)) * bottom[0] + srcAlpha * c1) / rltAlpha);
//				dest[1] = (uint8)(((dstAlpha * (1.0 - srcAlpha)) * bottom[1] + srcAlpha * c2) / rltAlpha);
//				dest[2] = (uint8)(((dstAlpha * (1.0 - srcAlpha)) * bottom[2] + srcAlpha * c3) / rltAlpha);
//				dest[3] = (uint8)(255.0 * rltAlpha);
				uint8 alphaRest = 255 - alpha;
				uint32 alphaTemp = (65025 - alphaRest * (255 - bottom[3]));
				uint32 alphaDest = bottom[3] * alphaRest;
				uint32 alphaSrc = 255 * alpha;
				dest[0] = (bottom[0] * alphaDest + c1 * alphaSrc) / alphaTemp;
				dest[1] = (bottom[1] * alphaDest + c2 * alphaSrc) / alphaTemp;
				dest[2] = (bottom[2] * alphaDest + c3 * alphaSrc) / alphaTemp;
				dest[3] = alphaTemp / 255;
			}
		}
	} else {
		*((uint32*)dest) = *((uint32*)bottom);
	}
}

// blend_colors
inline void
blend_colors(uint8* bottom, uint8 alpha, uint8 c1, uint8 c2, uint8 c3)
{
	if (alpha > 0) {
		if (bottom[3] == 0 || alpha == 255) {
			bottom[0] = c1;
			bottom[1] = c2;
			bottom[2] = c3;
			bottom[3] = alpha;
		} else {
			if (bottom[3] == 255) {
				uint32 destAlpha = 255 - alpha;
				bottom[0] = (uint8)((bottom[0] * destAlpha + c1 * alpha) / 255);
				bottom[1] = (uint8)((bottom[1] * destAlpha + c2 * alpha) / 255);
				bottom[2] = (uint8)((bottom[2] * destAlpha + c3 * alpha) / 255);
			} else {
/*				float srcAlpha = alpha / 255.0;
				float dstAlpha = bottom[3] / 255.0;
				float rltAlpha = (1.0 - (1.0 - srcAlpha) * (1.0 - dstAlpha));
				bottom[0] = (uint8)(((dstAlpha * (1.0 - srcAlpha)) * bottom[0] + srcAlpha * c1) / rltAlpha);
				bottom[1] = (uint8)(((dstAlpha * (1.0 - srcAlpha)) * bottom[1] + srcAlpha * c2) / rltAlpha);
				bottom[2] = (uint8)(((dstAlpha * (1.0 - srcAlpha)) * bottom[2] + srcAlpha * c3) / rltAlpha);
				bottom[3] = (uint8)(255.0 * rltAlpha);*/
				uint8 alphaRest = 255 - alpha;
				uint32 alphaTemp = (65025 - alphaRest * (255 - bottom[3]));
				uint32 alphaDest = bottom[3] * alphaRest;
				uint32 alphaSrc = 255 * alpha;
				bottom[0] = (bottom[0] * alphaDest + c1 * alphaSrc) / alphaTemp;
				bottom[1] = (bottom[1] * alphaDest + c2 * alphaSrc) / alphaTemp;
				bottom[2] = (bottom[2] * alphaDest + c3 * alphaSrc) / alphaTemp;
				bottom[3] = alphaTemp / 255;
			}
		}
	}
}

// blend_colors
inline void
blend_colors(uint8* bottom, uint8* source, uint8 alphaOverride)
{
	uint8 alpha = (source[3] * alphaOverride) / 255;
	if (alpha > 0) {
		if (bottom[3] == 0 || alpha == 255) {
			bottom[0] = source[0];
			bottom[1] = source[1];
			bottom[2] = source[2];
			bottom[3] = alpha;
		} else {
			if (bottom[3] == 255) {
				uint32 destAlpha = 255 - alpha;
				bottom[0] = (uint8)((bottom[0] * destAlpha + source[0] * alpha) / 255);
				bottom[1] = (uint8)((bottom[1] * destAlpha + source[1] * alpha) / 255);
				bottom[2] = (uint8)((bottom[2] * destAlpha + source[2] * alpha) / 255);
			} else {
				uint8 alphaRest = 255 - alpha;
				uint32 alphaTemp = (65025 - alphaRest * (255 - bottom[3]));
				uint32 alphaDest = bottom[3] * alphaRest;
				uint32 alphaSrc = 255 * alpha;
				bottom[0] = (bottom[0] * alphaDest + source[0] * alphaSrc) / alphaTemp;
				bottom[1] = (bottom[1] * alphaDest + source[1] * alphaSrc) / alphaTemp;
				bottom[2] = (bottom[2] * alphaDest + source[2] * alphaSrc) / alphaTemp;
				bottom[3] = alphaTemp / 255;
			}
		}
	}
}

// blend_colors
inline void
blend_colors(uint8* bottom, uint8* source)
{
	if (source[3] > 0) {
		if (bottom[3] == 0 || source[3] == 255) {
			bottom[0] = source[0];
			bottom[1] = source[1];
			bottom[2] = source[2];
			bottom[3] = source[3];
		} else {
			if (bottom[3] == 255) {
				uint32 destAlpha = 255 - source[3];
				bottom[0] = (uint8)((bottom[0] * destAlpha + source[0] * source[3]) / 255);
				bottom[1] = (uint8)((bottom[1] * destAlpha + source[1] * source[3]) / 255);
				bottom[2] = (uint8)((bottom[2] * destAlpha + source[2] * source[3]) / 255);
			} else {
				uint8 alphaRest = 255 - source[3];
				uint32 alphaTemp = (65025 - alphaRest * (255 - bottom[3]));
				uint32 alphaDest = bottom[3] * alphaRest;
				uint32 alphaSrc = 255 * source[3];
				bottom[0] = (bottom[0] * alphaDest + source[0] * alphaSrc) / alphaTemp;
				bottom[1] = (bottom[1] * alphaDest + source[1] * alphaSrc) / alphaTemp;
				bottom[2] = (bottom[2] * alphaDest + source[2] * alphaSrc) / alphaTemp;
				bottom[3] = alphaTemp / 255;
			}
		}
	}
}

// blend_colors_copy
inline void
blend_colors_copy(uint8* dest, uint8* bottom, uint8* top)
{
	if (bottom[3] == 0 || top[3] == 255) {
		dest[0] = top[0];
		dest[1] = top[1];
		dest[2] = top[2];
		dest[3] = top[3];
	} else {
		if (bottom[3] == 255) {
			uint32 destAlpha = 255 - top[3];
			dest[0] = (uint8)((bottom[0] * destAlpha + top[0] * top[3]) / 255);
			dest[1] = (uint8)((bottom[1] * destAlpha + top[1] * top[3]) / 255);
			dest[2] = (uint8)((bottom[2] * destAlpha + top[2] * top[3]) / 255);
			dest[3] = 255;
		} else {
			uint8 alphaRest = 255 - top[3];
			uint32 alphaTemp = (65025 - alphaRest * (255 - bottom[3]));
			uint32 alphaDest = bottom[3] * alphaRest;
			uint32 alphaSrc = 255 * top[3];
			dest[0] = (bottom[0] * alphaDest + top[0] * alphaSrc) / alphaTemp;
			dest[1] = (bottom[1] * alphaDest + top[1] * alphaSrc) / alphaTemp;
			dest[2] = (bottom[2] * alphaDest + top[2] * alphaSrc) / alphaTemp;
			dest[3] = alphaTemp / 255;
		}
	}
}

// blend_pixels
inline void
blend_pixels(uint8* bottom, uint8* top, uint8 alpha)
{
	if (alpha > 0) {
		if (alpha == 255) {
			bottom[0] = top[0];
			bottom[1] = top[1];
			bottom[2] = top[2];
			bottom[3] = top[3];
		} else {
			uint8 mergeAlpha = bottom[3] ? (top[3] * alpha) / 255 : 255;
			uint8 invAlpha = 255 - mergeAlpha;
			bottom[0] = (bottom[0] * invAlpha + top[0] * mergeAlpha) / 255;
			bottom[1] = (bottom[1] * invAlpha + top[1] * mergeAlpha) / 255;
			bottom[2] = (bottom[2] * invAlpha + top[2] * mergeAlpha) / 255;
			bottom[3] = (bottom[3] * (255 - alpha) + top[3] * alpha) / 255;
		}
	}
}

// blend_pixels_copy
inline void
blend_pixels_copy(uint8* bottom, uint8* top, uint8* dest, uint8 alpha)
{
	if (alpha > 0) {
		if (alpha == 255) {
			dest[0] = top[0];
			dest[1] = top[1];
			dest[2] = top[2];
			dest[3] = top[3];
		} else {
			uint8 mergeAlpha = bottom[3] ? (top[3] * alpha) / 255 : 255;
			uint8 invAlpha = 255 - mergeAlpha;
			dest[0] = (bottom[0] * invAlpha + top[0] * mergeAlpha) / 255;
			dest[1] = (bottom[1] * invAlpha + top[1] * mergeAlpha) / 255;
			dest[2] = (bottom[2] * invAlpha + top[2] * mergeAlpha) / 255;
			dest[3] = (bottom[3] * (255 - alpha) + top[3] * alpha) / 255;
		}
	} else {
		dest[0] = bottom[0];
		dest[1] = bottom[1];
		dest[2] = bottom[2];
		dest[3] = bottom[3];
	}
}

# endif // BLENDING_H
